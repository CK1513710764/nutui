"use strict";(self.webpackChunkNutUI=self.webpackChunkNutUI||[]).push([[377],{"./src/components/Button/button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/jsx-runtime.js"),classnames__WEBPACK_IMPORTED_MODULE_2__=(__webpack_require__("./node_modules/react/index.js"),__webpack_require__("./node_modules/classnames/index.js")),classnames__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_2__);const Button=props=>{const{btnType,className,disabled,size,children,href,...restProps}=props,classes=classnames__WEBPACK_IMPORTED_MODULE_2___default()("btn",className,{[`btn-${btnType}`]:btnType,[`btn-${size}`]:size,disabled:"link"===btnType&&disabled});return"link"===btnType&&href?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("a",{className:classes,href,...restProps,children}):(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("button",{className:classes,disabled,...restProps,children})};Button.defaultProps={disabled:!1,btnType:"default"};const __WEBPACK_DEFAULT_EXPORT__=Button;Button.__docgenInfo={description:"",methods:[],displayName:"Button",props:{disabled:{defaultValue:{value:"false",computed:!1},required:!1},btnType:{defaultValue:{value:"'default'",computed:!1},required:!1}}}},"./src/components/Button/index.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__=__webpack_require__("./src/components/Button/button.tsx").A},"./src/components/Form/form.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{ABasicForm:()=>ABasicForm,BRegForm:()=>BRegForm,CFullForm:()=>CFullForm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>form_stories});var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js"),react=__webpack_require__("./node_modules/react/index.js"),dist_web=__webpack_require__("./node_modules/async-validator/dist-web/index.js"),mapValues=__webpack_require__("./node_modules/lodash-es/mapValues.js"),forEach=__webpack_require__("./node_modules/lodash-es/forEach.js");function fieldsReducer(state,action){switch(action.type){case"addField":return{...state,[action.name]:{...action.value}};case"updateValue":return{...state,[action.name]:{...state[action.name],value:action.value}};case"updateValidateResult":const{isValid,errors}=action.value;return{...state,[action.name]:{...state[action.name],isValid,errors}};default:return state}}const Form_useStore=function useStore(initialValues){const[form,setForm]=(0,react.useState)({isValid:!0,isSubmitting:!1,errors:{}}),[fields,dispatch]=(0,react.useReducer)(fieldsReducer,{}),getFieldValue=key=>fields[key]&&fields[key].value,transfromRules=rules=>rules.map(rule=>{if("function"==typeof rule){return rule({getFieldValue})}return rule});return{fields,dispatch,form,validateField:async name=>{const{value,rules}=fields[name],afterRules=transfromRules(rules),descriptor={[name]:afterRules},valueMap={[name]:value},validator=new dist_web.A(descriptor);let isValid=!0,errors=[];try{await validator.validate(valueMap)}catch(e){isValid=!1;const err=e;console.log("e",err.errors),console.log("fields",err.fields),errors=err.errors}finally{console.log("errors",isValid),dispatch({type:"updateValidateResult",name,value:{isValid,errors}})}},getFieldValue,validateAllFields:async()=>{let isValid=!0,errors={};const valueMap=(0,mapValues.A)(fields,item=>item.value),descriptor=(0,mapValues.A)(fields,item=>transfromRules(item.rules)),validator=new dist_web.A(descriptor);setForm({...form,isSubmitting:!0});try{await validator.validate(valueMap)}catch(e){isValid=!1;errors=e.fields,(0,forEach.A)(fields,(value,name)=>{if(errors[name]){const itemErrors=errors[name];dispatch({type:"updateValidateResult",name,value:{isValid:!1,errors:itemErrors}})}else value.rules.length>0&&!errors[name]&&dispatch({type:"updateValidateResult",name,value:{isValid:!0,errors:[]}})})}finally{return setForm({...form,isSubmitting:!1,isValid,errors}),{isValid,errors,values:valueMap}}},getFieldsValue:()=>(0,mapValues.A)(fields,item=>item.value),setFieldValue:(name,value)=>{fields[name]&&dispatch({type:"updateValue",name,value})},resetFields:()=>{initialValues&&(0,forEach.A)(initialValues,(value,name)=>{fields[name]&&dispatch({type:"updateValue",name,value})})}}},FormContext=(0,react.createContext)({}),Form=(0,react.forwardRef)((props,ref)=>{const{name,children,initialValues,onFinish,onFinishFailed}=props,{form,fields,dispatch,...restProps}=Form_useStore(initialValues),{validateField,validateAllFields}=restProps;(0,react.useImperativeHandle)(ref,()=>({...restProps}));const passedContext={dispatch,fields,initialValues,validateField};let childrenNode;return childrenNode="function"==typeof children?children(form):children,(0,jsx_runtime.jsx)("form",{name,className:"viking-form",onSubmit:async e=>{e.preventDefault(),e.stopPropagation();const{isValid,errors,values}=await validateAllFields();isValid&&onFinish?onFinish(values):!isValid&&onFinishFailed&&onFinishFailed(values,errors)},children:(0,jsx_runtime.jsx)(FormContext.Provider,{value:passedContext,children:childrenNode})})});Form.defaultProps={name:"viking_form"};const Form_form=Form;Form.__docgenInfo={description:"",methods:[],displayName:"Form",props:{name:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'viking_form'",computed:!1}},initialValues:{required:!1,tsType:{name:"Record",elements:[{name:"string"},{name:"any"}],raw:"Record<string, any>"},description:""},children:{required:!1,tsType:{name:"union",raw:"ReactNode | RenderProps",elements:[{name:"ReactNode"},{name:"signature",type:"function",raw:"(form: FormState) => ReactNode",signature:{arguments:[{type:{name:"FormState"},name:"form"}],return:{name:"ReactNode"}}}]},description:""},onFinish:{required:!1,tsType:{name:"signature",type:"function",raw:"(values: Record<string, any>) => void",signature:{arguments:[{type:{name:"Record",elements:[{name:"string"},{name:"any"}],raw:"Record<string, any>"},name:"values"}],return:{name:"void"}}},description:""},onFinishFailed:{required:!1,tsType:{name:"signature",type:"function",raw:"(\n  values: Record<string, any>,\n  errors: Record<string, ValidateError[]>,\n) => void",signature:{arguments:[{type:{name:"Record",elements:[{name:"string"},{name:"any"}],raw:"Record<string, any>"},name:"values"},{type:{name:"Record",elements:[{name:"string"},{name:"Array",elements:[{name:"ValidateError"}],raw:"ValidateError[]"}],raw:"Record<string, ValidateError[]>"},name:"errors"}],return:{name:"void"}}},description:""}}};var classnames=__webpack_require__("./node_modules/classnames/index.js"),classnames_default=__webpack_require__.n(classnames);const FormItem=props=>{const{label,children,name,valuePropName,trigger,getValueFromEvent,rules,validateTrigger}=props,{dispatch,fields,initialValues,validateField}=(0,react.useContext)(FormContext),rowClass=classnames_default()("viking-row",{"viking-row-no-label":!label});(0,react.useEffect)(()=>{const value=initialValues&&initialValues[name]||"";dispatch({type:"addField",name,value:{label,name,value,rules:rules||[],errors:[],isValid:!0}})},[dispatch,initialValues,label,name,rules]);const fieldState=fields[name],value=fieldState&&fieldState.value,errors=fieldState&&fieldState.errors,isRequired=rules?.some(rule=>"function"!=typeof rule&&rule.required),hasError=errors&&errors.length>0,labelClass=classnames_default()({"viking-form-item-required":isRequired}),itemClass=classnames_default()("viking-form-item-control",{"viking-form-item-has-error":hasError}),onValueValidate=async()=>{await validateField(name)},controlProps={};controlProps[valuePropName]=value,controlProps[trigger]=e=>{const value=getValueFromEvent(e);console.log("new value",value),dispatch({type:"updateValue",name,value})},rules&&(controlProps[validateTrigger]=onValueValidate);const childList=react.Children.toArray(children);0===childList.length&&console.error("No child element found in Form.Item, please provide one form component"),childList.length>1&&console.warn("Only support one child element in Form.Item, others will be omitted"),react.isValidElement(childList[0])||console.error("Child component is not a valid React Element");const child=childList[0],returnChildNode=react.cloneElement(child,{...child.props,...controlProps});return(0,jsx_runtime.jsxs)("div",{className:rowClass,children:[label&&(0,jsx_runtime.jsx)("div",{className:"viking-form-item-label",children:(0,jsx_runtime.jsx)("label",{title:label,className:labelClass,children:label})}),(0,jsx_runtime.jsxs)("div",{className:"viking-form-item",children:[(0,jsx_runtime.jsx)("div",{className:itemClass,children:returnChildNode}),hasError&&(0,jsx_runtime.jsx)("div",{className:"viking-form-item-explain",children:(0,jsx_runtime.jsx)("span",{children:errors[0].message})})]})]})};FormItem.defaultProps={valuePropName:"value",trigger:"onChange",validateTrigger:"onBlur",getValueFromEvent:e=>e.target.value};const formItem=FormItem;FormItem.__docgenInfo={description:"",methods:[],displayName:"FormItem",props:{name:{required:!0,tsType:{name:"string"},description:""},label:{required:!1,tsType:{name:"string"},description:""},children:{required:!1,tsType:{name:"ReactNode"},description:""},valuePropName:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'value'",computed:!1}},trigger:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'onChange'",computed:!1}},getValueFromEvent:{required:!1,tsType:{name:"signature",type:"function",raw:"(event: any) => any",signature:{arguments:[{type:{name:"any"},name:"event"}],return:{name:"any"}}},description:"",defaultValue:{value:"(e) => e.target.value",computed:!1}},rules:{required:!1,tsType:{name:"Array",elements:[{name:"union",raw:"RuleItem | CustomRuleFunc",elements:[{name:"RuleItem"},{name:"signature",type:"function",raw:"({ getFieldValue }) => RuleItem",signature:{arguments:[{name:""}],return:{name:"RuleItem"}}}]}],raw:"CustomRule[]"},description:""},validateTrigger:{required:!1,tsType:{name:"string"},description:"",defaultValue:{value:"'onBlur'",computed:!1}}}};var Input=__webpack_require__("./src/components/Input/index.tsx"),Button=__webpack_require__("./src/components/Button/index.tsx"),Select=__webpack_require__("./src/components/Select/index.tsx");const form_stories={title:"Form 组件",id:"Form",component:Form_form,subcomponents:{Item:formItem},decorators:[Story=>(0,jsx_runtime.jsx)("div",{style:{width:"550px"},children:(0,jsx_runtime.jsx)(Story,{})})],parameters:{docs:{source:{type:"code"}}}},confirmRules=[{type:"string",required:!0,min:3,max:8},({getFieldValue})=>({asyncValidator:(rule,value)=>(console.log("the value",getFieldValue("password")),console.log(value),new Promise((resolve,reject)=>{value!==getFieldValue("password")&&reject("The two passwords that you entered do not match!"),setTimeout(()=>{resolve()},1e3)}))})],ABasicForm={name:"基本的登陆表单",render:args=>(0,jsx_runtime.jsxs)(Form_form,{...args,children:[(0,jsx_runtime.jsx)(formItem,{label:"用户名",name:"name",rules:[{type:"string",required:!0,min:3}],children:(0,jsx_runtime.jsx)(Input.A,{})}),(0,jsx_runtime.jsx)(formItem,{label:"密码",name:"password",rules:[{type:"string",required:!0,min:3,max:8}],children:(0,jsx_runtime.jsx)(Input.A,{type:"password"})}),(0,jsx_runtime.jsx)("div",{className:"viking-form-submit-area",children:(0,jsx_runtime.jsx)(Button.A,{type:"submit",btnType:"primary",children:"登陆"})})]})},BRegForm={name:"注册表单，支持多种 FormItem 组件",render:args=>(0,jsx_runtime.jsxs)(Form_form,{...args,initialValues:{agreement:!1},children:[(0,jsx_runtime.jsx)(formItem,{label:"邮件",name:"email",rules:[{type:"email",required:!0}],children:(0,jsx_runtime.jsx)(Input.A,{})}),(0,jsx_runtime.jsx)(formItem,{label:"密码",name:"password",rules:[{type:"string",required:!0,min:3,max:8}],children:(0,jsx_runtime.jsx)(Input.A,{type:"password"})}),(0,jsx_runtime.jsx)(formItem,{label:"性别",name:"gender",rules:[{type:"string",required:!0}],getValueFromEvent:e=>e,valuePropName:"defaultValue",children:(0,jsx_runtime.jsxs)(Select.A,{placeholder:"请选择性别",children:[(0,jsx_runtime.jsx)(Select.A.Option,{value:"男"}),(0,jsx_runtime.jsx)(Select.A.Option,{value:"女"})]})}),(0,jsx_runtime.jsxs)("div",{className:"agreement-section",style:{display:"flex",justifyContent:"center"},children:[(0,jsx_runtime.jsx)(formItem,{name:"agreement",rules:[{type:"enum",enum:[!0],message:"请同意协议"}],getValueFromEvent:e=>e.target.checked,valuePropName:"checked",children:(0,jsx_runtime.jsx)("input",{type:"checkbox"})}),(0,jsx_runtime.jsxs)("span",{className:"agree-text",children:["注册即代表你同意",(0,jsx_runtime.jsx)("a",{href:"#",children:"用户协议"})]})]}),(0,jsx_runtime.jsx)("div",{className:"viking-form-submit-area",children:(0,jsx_runtime.jsx)(Button.A,{type:"submit",btnType:"primary",children:"登陆"})})]})},CFullForm={name:"自定义规则，调用表单实例",render:args=>{const ref=(0,react.useRef)(null),resetAll=()=>{console.log("form ref",ref.current),console.log("get value",ref.current?.getFieldValue("username")),ref.current?.resetFields()};return(0,jsx_runtime.jsx)(Form_form,{initialValues:{username:"viking",agreement:!1},...args,ref,children:({isValid,isSubmitting})=>(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(formItem,{label:"用户名",name:"username",rules:[{type:"email",required:!0}],children:(0,jsx_runtime.jsx)(Input.A,{})}),(0,jsx_runtime.jsx)(formItem,{label:"密码",name:"password",rules:[{type:"string",required:!0,min:3,max:8}],children:(0,jsx_runtime.jsx)(Input.A,{type:"password"})}),(0,jsx_runtime.jsx)(formItem,{label:"重复密码",name:"confirmPwd",rules:confirmRules,children:(0,jsx_runtime.jsx)(Input.A,{type:"password"})}),(0,jsx_runtime.jsxs)("div",{className:"agreement-section",style:{display:"flex",justifyContent:"center"},children:[(0,jsx_runtime.jsx)(formItem,{name:"agreement",valuePropName:"checked",getValueFromEvent:e=>e.target.checked,rules:[{type:"enum",enum:[!0],message:"请同意协议"}],children:(0,jsx_runtime.jsx)("input",{type:"checkbox"})}),(0,jsx_runtime.jsxs)("span",{className:"agree-text",children:["注册即代表你同意",(0,jsx_runtime.jsx)("a",{href:"#",children:"用户协议"})]})]}),(0,jsx_runtime.jsxs)("div",{className:"viking-form-submit-area",children:[(0,jsx_runtime.jsxs)(Button.A,{type:"submit",btnType:"primary",children:["登陆 ",isSubmitting?"验证中":"验证完毕"," ",isValid?"通过😄":"没通过😢"," "]}),(0,jsx_runtime.jsx)(Button.A,{type:"button",onClick:resetAll,children:"重置"})]})]})})}},__namedExportsOrder=["ABasicForm","BRegForm","CFullForm"];ABasicForm.parameters={...ABasicForm.parameters,docs:{...ABasicForm.parameters?.docs,source:{originalSource:'{\n  name: \'基本的登陆表单\',\n  render: args => {\n    return <Form {...args}>\r\n        <Item label="用户名" name="name" rules={[{\n        type: \'string\',\n        required: true,\n        min: 3\n      }]}>\r\n          <Input />\r\n        </Item>\r\n        <Item label="密码" name="password" rules={[{\n        type: \'string\',\n        required: true,\n        min: 3,\n        max: 8\n      }]}>\r\n          <Input type="password" />\r\n        </Item>\r\n        <div className="viking-form-submit-area">\r\n          <Button type="submit" btnType="primary">\r\n            登陆\r\n          </Button>\r\n        </div>\r\n      </Form>;\n  }\n}',...ABasicForm.parameters?.docs?.source}}},BRegForm.parameters={...BRegForm.parameters,docs:{...BRegForm.parameters?.docs,source:{originalSource:'{\n  name: \'注册表单，支持多种 FormItem 组件\',\n  render: args => {\n    const initialValues = {\n      agreement: false\n    };\n    return <Form {...args} initialValues={initialValues}>\r\n        <Item label="邮件" name="email" rules={[{\n        type: \'email\',\n        required: true\n      }]}>\r\n          <Input />\r\n        </Item>\r\n        <Item label="密码" name="password" rules={[{\n        type: \'string\',\n        required: true,\n        min: 3,\n        max: 8\n      }]}>\r\n          <Input type="password" />\r\n        </Item>\r\n        <Item label="性别" name="gender" rules={[{\n        type: \'string\',\n        required: true\n      }]} getValueFromEvent={e => e} valuePropName="defaultValue">\r\n          <Select placeholder="请选择性别">\r\n            <Select.Option value="男" />\r\n            <Select.Option value="女" />\r\n          </Select>\r\n        </Item>\r\n        <div className="agreement-section" style={{\n        display: \'flex\',\n        justifyContent: \'center\'\n      }}>\r\n          <Item name="agreement" rules={[{\n          type: \'enum\',\n          enum: [true],\n          message: \'请同意协议\'\n        }]} getValueFromEvent={e => e.target.checked} valuePropName="checked">\r\n            <input type="checkbox" />\r\n          </Item>\r\n          <span className="agree-text">\r\n            注册即代表你同意<a href="#">用户协议</a>\r\n          </span>\r\n        </div>\r\n        <div className="viking-form-submit-area">\r\n          <Button type="submit" btnType="primary">\r\n            登陆\r\n          </Button>\r\n        </div>\r\n      </Form>;\n  }\n}',...BRegForm.parameters?.docs?.source}}},CFullForm.parameters={...CFullForm.parameters,docs:{...CFullForm.parameters?.docs,source:{originalSource:'{\n  name: \'自定义规则，调用表单实例\',\n  render: args => {\n    const ref = useRef<IFormRef>(null);\n    const resetAll = () => {\n      console.log(\'form ref\', ref.current);\n      console.log(\'get value\', ref.current?.getFieldValue(\'username\'));\n      ref.current?.resetFields();\n    };\n    return <Form initialValues={{\n      username: \'viking\',\n      agreement: false\n    }} {...args} ref={ref}>\r\n        {({\n        isValid,\n        isSubmitting\n      }) => <>\r\n            <Item label="用户名" name="username" rules={[{\n          type: \'email\',\n          required: true\n        }]}>\r\n              <Input />\r\n            </Item>\r\n            <Item label="密码" name="password" rules={[{\n          type: \'string\',\n          required: true,\n          min: 3,\n          max: 8\n        }]}>\r\n              <Input type="password" />\r\n            </Item>\r\n            <Item label="重复密码" name="confirmPwd" rules={confirmRules}>\r\n              <Input type="password" />\r\n            </Item>\r\n            <div className="agreement-section" style={{\n          display: \'flex\',\n          justifyContent: \'center\'\n        }}>\r\n              <Item name="agreement" valuePropName="checked" getValueFromEvent={e => e.target.checked} rules={[{\n            type: \'enum\',\n            enum: [true],\n            message: \'请同意协议\'\n          }]}>\r\n                <input type="checkbox" />\r\n              </Item>\r\n              <span className="agree-text">\r\n                注册即代表你同意<a href="#">用户协议</a>\r\n              </span>\r\n            </div>\r\n            <div className="viking-form-submit-area">\r\n              <Button type="submit" btnType="primary">\r\n                登陆 {isSubmitting ? \'验证中\' : \'验证完毕\'}{\' \'}\r\n                {isValid ? \'通过😄\' : \'没通过😢\'}{\' \'}\r\n              </Button>\r\n              <Button type="button" onClick={resetAll}>\r\n                重置\r\n              </Button>\r\n            </div>\r\n          </>}\r\n      </Form>;\n  }\n}',...CFullForm.parameters?.docs?.source}}}}}]);